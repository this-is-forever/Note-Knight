package swingextended;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

/**
 * A context menu owned by a {@link TextAreaWithContextMenu}. Contains Cut, Copy, Paste, Delete and Select All options.
 * The menu will listen to mouse and key events generated by its parent.
 */
public class TextAreaContextMenu extends JPopupMenu implements MouseListener, KeyListener {

    // References the component's owner
    private final TextAreaWithContextMenu owner;
    // A list of components which will be disabled when no text is selected
    private final ArrayList<JMenuItem> itemsRequiringSelectedText = new ArrayList<>(8);
    // References the undo and redo buttons for the sake of enabling/disabling
    private JMenuItem undoItem, redoItem;

    public TextAreaContextMenu(TextAreaWithContextMenu owner) {
        this.owner = owner;
        create();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    /**
     * Method called when the user released a mouse button. Used by the text area to show the context menu when
     * the right mouse button (Windows) is clicked and then released
     * @param e Event information passed by Swing
     */
    @Override
    public void mouseReleased(MouseEvent e) {
        // Did the user right click?
        if(e.isPopupTrigger() && owner.isEnabled()) {
            // Yes; enable or disable menu items requiring selected text
            determineMenuVisibility();
            // Show the menu at the location where the user clicked
            show(e.getComponent(), e.getX(), e.getY());
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {

    }
    /**
     * Method called when the user releases any key when the text area has focus. Used by the text area to show the
     * context menu when the Context Menu key is pressed and then released.
     * @param e Event information passed by Swing
     */
    @Override
    public void keyReleased(KeyEvent e) {
        // Did the user press the Context Menu key?
        if(e.getKeyCode() == KeyEvent.VK_CONTEXT_MENU && owner.isEnabled()) {
            // Yes; determine where to place the menu and display it
            // Determine the height of the editor's current font
            FontMetrics m = owner.getFontMetrics(owner.getFont());
            Point caretPosition = owner.getCaret().getMagicCaretPosition();
            // Enable or disable menu items that require selected text
            determineMenuVisibility();
            // Move the menu to the determined position and show it
            show(owner, caretPosition.x, caretPosition.y + m.getHeight());
        }
    }

    /**
     * Enables and disables the Undo and Redo context menu options based on the flags given
     * @param canUndo Flag set if the Undo option should be enabled
     * @param canRedo Flag set if the Redo option should be enabled
     */
    public void updateUndoRedoItems(boolean canUndo, boolean canRedo) {
        undoItem.setEnabled(canUndo);
        redoItem.setEnabled(canRedo);
    }

    /**
     * Creates the context menu's menu items and adds them to itself
     */
    private void create() {
        JMenuItem item;

        add(undoItem = new JMenuItem("Undo"));
        undoItem.setEnabled(false);
        undoItem.addActionListener(e -> owner.undo());

        add(redoItem = new JMenuItem("Redo"));
        redoItem.setEnabled(false);
        redoItem.addActionListener(e -> owner.redo());
        addSeparator();

        add(item = new JMenuItem("Cut"));
        item.addActionListener(e -> owner.cut());
        itemsRequiringSelectedText.add(item);

        add(item = new JMenuItem("Copy"));
        item.addActionListener(e -> owner.copy());
        itemsRequiringSelectedText.add(item);

        add(item = new JMenuItem("Paste"));
        item.addActionListener(e -> owner.paste());

        add(item = new JMenuItem("Delete"));
        item.addActionListener(e -> owner.delete());
        itemsRequiringSelectedText.add(item);

        addSeparator();

        add(item = new JMenuItem("Select All"));
        item.addActionListener(e -> owner.selectAll());
    }

    /**
     * Determines whether menu items which require selected text should be enabled. If not, disables them.
     */
    private void determineMenuVisibility() {
        boolean textSelected = owner.isTextSelected();
        for (JMenuItem m : itemsRequiringSelectedText)
            m.setEnabled(textSelected);
    }
}
